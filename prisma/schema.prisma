datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  flow          Flow[]
  parameters    Parameter[]
  executionResults ExecutionResult[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ext_expires_in    Int? 
  version           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Flow {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  state       String
  isDraft     Boolean
  parameters  Parameter[]
  executionResults ExecutionResult[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Parameter {
  id         String   @id @default(uuid())
  name       String   
  userId     String
  flowId     String?
  iri        String? 
  flow       Flow?    @relation(fields: [flowId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  value      Json 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ExecutionResult {
  id                  String   @id @default(uuid())
  flowId              String
  userId              String
  resultGraphURI      String
  executionParameters Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
