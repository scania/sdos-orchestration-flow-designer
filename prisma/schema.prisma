datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String?         @unique
  emailVerified            DateTime?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  flowsCreated             Flow[]          @relation("FlowsCreated")
  flowsUpdated             Flow[]          @relation("FlowsUpdated")
  flowHistoriesCreated     FlowHistory[]   @relation("FlowHistoriesCreated")
  flowHistoriesUpdated     FlowHistory[]   @relation("FlowHistoriesUpdated")
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ext_expires_in    Int? 
  version           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier   String
  token        String
  expires      DateTime
  @@unique([identifier, token])
}

model Flow {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  createdById   String
  createdBy     User          @relation("FlowsCreated", fields: [createdById], references: [id], onDelete: Cascade)
  updatedById   String?
  updatedBy     User?         @relation("FlowsUpdated", fields: [updatedById], references: [id])
  state         String
  isDraft       Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isPrivate     Boolean       @default(false)
  histories     FlowHistory[]
}

model FlowHistory {
  id            String        @id @default(uuid())
  flowId        String
  flow          Flow          @relation(fields: [flowId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  state         String
  isDraft       Boolean
  isPrivate     Boolean
  createdById   String
  createdBy     User          @relation("FlowHistoriesCreated", fields: [createdById], references: [id], onDelete: Cascade)
  updatedById   String?
  updatedBy     User?         @relation("FlowHistoriesUpdated", fields: [updatedById], references: [id])
  revertedFromId String?      
  createdAt     DateTime      @default(now())
}
